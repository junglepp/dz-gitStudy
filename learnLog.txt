
				Spring

23/4/11:
	什么是bean对象？
	在Spring 中，构成应用程序主干并由Spring ioc容器管理的对象称为bean。bean是一个由Spring ioc容器实例化、组装和管理的对象。
	1.bean是对象，一个或者多个不限定
	2.bean由Spring中一个叫ioC的东西管理
	3.在Java代码中定义的 类或其父类对象变量，会根据变量名对应bean的id自动注入。
	4.根据类型获取bean对象的时候，要求IOC容器中指定类型的bean只能有一个。可以通过类型+id或id的方式获取bean对象。

依赖注入之set注入：
	创建一个类，在对其定义属性、无参构造、有参构造、set、get、tostring后
配置bean文件，在bean对象中添加property标签，底层理解大概为set方法，set***(" *** ");
<property name="***" value="***"></property>其中name为需要赋值的属性，value为需要设置的属性值。

----------------------------------------------------------------------------------------------------------------------------------------------------------					               分割线
----------------------------------------------------------------------------------------------------------------------------------------------------------

23/4/12:
	如何注入对象类型属性？
一、外部引入bean
	1、创建两个类（员工类Emp、部门类Dept）
	2、在分别创建bean对象后，注入普通类型属性
	3、在emp的bean对象中引入dept的bean对象。
	<property name="dept" ref="dept"></property>
二、内部引入bean
        <property name="dept">
            <bean id="dept2" class="com.atlhs.spring6.iocxml.ditest.Dept">
                <property name="dName" value="财务部"></property>
            </bean>
        </property>
三、级联属性赋值
	1、通过得到外部bean对象，在向对象的属性赋值
        <property name="dept" ref="dept3"></property>
        <property name="dept.dName" value="测试部"></property>

----------------------------------------------------------------------------------------------------------------------------------------------------------							分割线
----------------------------------------------------------------------------------------------------------------------------------------------------------
	
23/4/12:

	注入List属性：
        <property name="empList">
            <list>
                <ref bean="empone"></ref>
                <ref bean="emptwo"></ref>
            </list>
        </property>

	注入Map属性：
<property name="teacherMap">
            <map>
                <entry>
                    <key>
                        <value>00000</value>
                    </key>
                    <ref bean="teacherone"></ref>
                </entry>
                <entry>
                    <key>
                        <value>00001</value>
                    </key>
                    <ref bean="teachertwo"></ref>
                </entry>
            </map>

	引用集合注入：
            		1 、创建三个对象
            		2、 注入普通类型属性
            		3 、使用util:类型 定义
            		4、 在学生bean引入util:类型定义bean，完成list、map类型属性注入

	bean的生命周期：

		1 bean对象创建（调用无参构造器）

		2 给bean对象设置属性

		3 bean的后置处理器（初始化之前）

		4 bean对象初始化（需在配置bean时指定初始化方法）

		5 bean的后置处理器（初始化之后）

		6 bean对象就绪可以使用

		7 bean对象销毁（需在配置bean时指定销毁方法）

		8 IOC容器关闭

----------------------------------------------------------------------------------------------------------------------------------------------------------							分割线
----------------------------------------------------------------------------------------------------------------------------------------------------------
	
23/4/12:

	controller --> service --> dao 

	bean的自动装配：
	1、创建controlller层、dao层以及impl、service层以及impl
	2、在controller层UserService userService ， setter并调用service的方法，在service层中UserDao userDao，setter并调用dao层方法;
	3、创建每个层的bean对象，在controller和service的bean中加入autowire="byType"/"byName"属性
	tips：在使用byName时，保证bean对象的id要和创建的变量名相同，否则nullPoint


----------------------------------------------------------------------------------------------------------------------------------------------------------							分割线
----------------------------------------------------------------------------------------------------------------------------------------------------------


				Mybatis

23/4/19:
	每个实体类都有对应的xml，在xml中定义管理该实体对象的SQL；
	mapper namespace属性应为mapper接口的全类名路径；
	mapper接口中的方法名应与sql标签中的id属性值一致；

关于xml中寻找路径使用“.”和 “/”：
"." 的作用是寻找java包时用到的,"/"是找除java包以外的文件用到的，如常用到的xml文件。


----------------------------------------------------------------------------------------------------------------------------------------------------------							分割线
----------------------------------------------------------------------------------------------------------------------------------------------------------


23/4/20:
	查询的数据只有一条，可以通过：
	实体类对象接收、List接收、Map接收

	查询的数据有多条：不能用实体对象接收，报ooManyResultsException
	可以通过：
	List<实体类型>接收
	List<Map>接收
	在mapper接口的方法上添加@MapKey注解

	@Param注解：通过@Param注解标识mapper中的方法参数，并放在map集合中；
User getByParam(@Param("username")String username,@Param("password")String password)      此时不需要定义实体类的对象来接收返回的数据。

	设置表名时，只能用${},因为表名不能加单引号

	association：处理多对一的映射关系   N: 员工-1: 部门
	collection：处理一对多的映射关系      1: 部门-N: 员工


----------------------------------------------------------------------------------------------------------------------------------------------------------							分割线
----------------------------------------------------------------------------------------------------------------------------------------------------------

					SpringMVC
23/4/21:

	什么是MVC？
		M:Model
		V:View
		C：Controller
	Model:指工程中的JavaBean 作用是处理数据；分为实体类Bean（存储实体类）以及业务处理Bean（Service、Mapper处理业务数据和数据访问）
	View：html页面，用户交互、展示数据
	Controller：控制层，指工程中的servlet，作用是接收请求和响应浏览器

MVC流程：用户通过视图层发送请求到服务器，服务器中通过Controller层接收，跳转到对应的Model层，进行处理加工后返回给Controller，再根据请求结果找到对应的视图，渲染数据后响应回给浏览器。

----------------------------------------------------------------------------------------------------------------------------------------------------------							分割线
----------------------------------------------------------------------------------------------------------------------------------------------------------


		                                                        Vue.js
23/4/25:
	Vue采用的是mvvm设计模式：
	m：model-->vm.data
	v：view
	vm：viewmodel-->vm对象或vm实例
	双向绑定:v-model属性 ---input举例
	    v-model不仅可以给input赋值，还可以监听input中的数据，数据的获取是实时的。

23/5/3:
Cannot read properties of null (reading '***'):可能是数据库中存在字段空值的情况


23/5/11:
   关于Vue3中的组合式API 实现路由跳转：
	1、首先在跳转页面引入 useRouter 

-	-----------------------------------------------------------------------
		import { useRouter } from 'vue-router'                                                                                   
	-----------------------------------------------------------------------
	2、创建路由跳转方法实例

	-----------------------------------------------------------------------
		 const router = useRouter()                                                                                
	-----------------------------------------------------------------------
	
	3、创建方法，带不带都行，本例带参数，通过scope.row拿到对应行的特定值，用push()方法进行路由的跳转
	其中：push方法包含了path以及query两个属性，并且对应，另外的，name 和 params对应

	------------------------------------------------------------------------
		const showCheck=(row)=>{
  			router.push({
   			 path:'/srmeetingapp',
    				query: {
      					reporter_department_name:row
   				 }
  				})
			}                                                                           
	-------------------------------------------------------------------------

	4、在被跳转的页面引入 userRoute （注意跟useRouter 区分）

	--------------------------------------------------------------------------
		import { useRoute } from 'vue-router'                                                                                 
	---------------------------------------------------------------------------

	5、创建useRoute构造方法实例

	--------------------------------------------------------------------------
		const route = useRoute();                                                                                
	---------------------------------------------------------------------------
	6、将跳转页面中的query中携带的参数进行赋值

	-----------------------------------------------------------------------------------------------
	         queryForm.value.query = route.query.reporter_department_name;                                                        
	------------------------------------------------------------------------------------------------
	注意：进行赋值操作时需要进行判断，否则在被跳转界面初始化时报java.lang.NullPointerException: null

	7、我们可以对其进行判断，当携带参数为空时，不执行被跳转页面的赋值：
	-----------------------------------------------------------------------------------------------
	         if (route.query.reporter_department_name){
  		queryForm.value.query = route.query.reporter_department_name;
		}                  
	------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------------------------------------------							分割线
---------------------------------------------------------------------------------------------------------------------------------------

23/5/23:

	props:可以理解为在组件当中的自定义属性；
		首先现在子组件中定义props------> const props = defineProps(["item"])
		再在父组件中对item进行赋值；注意：props中的属性为只读单项数据，不可修改
		1111111111111111111111111111111111

